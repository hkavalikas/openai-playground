import { OpenAI } from 'openai';

/* Roles:
 * - developer: developer messages are instructions provided by the application developer, prioritized ahead of user messages.
 * - user: user messages are instructions provided by an end user, prioritized behind developer messages.
 * - assistant: Messages generated by the model have the assistant role.
 */
const client = new OpenAI();

const simpleTextInputExample = async () => {
  const response = await client.responses.create({
    model: 'gpt-4.1-nano',
    input: 'Write a one-sentence bedtime story about a unicorn.',
  });

  console.log(JSON.stringify(response, null, 2));
};

const simpleTextWithInstructionsExample = async () => {
  const response = await client.responses.create({
    model: 'gpt-4.1',
    // only applies to current prompt, not future ones if we keep the context
    instructions: 'Talk like a pirate.',
    input: 'Are semicolons optional in JavaScript?',
  });

  console.log(response.output_text);
};

const simpleTextWithMultipleInputsExample = async () => {
  const response = await client.responses.create({
    model: 'gpt-4.1',
    input: [
      {
        role: 'developer',
        content: 'Talk like a pirate.',
      },
      {
        role: 'user',
        content: 'Are semicolons optional in JavaScript?',
      },
    ],
  });

  console.log(response.output_text);
};

const simpleTextWithPredefinedPromptsExample = async () => {
  const response = await client.responses.create({
    model: 'gpt-4.1-nano',
    prompt: {
      id: 'pmpt_6879ecd3157c8196bb19bd97daa7f3c806af449d4a172fa6',
      version: '1',
      variables: {
        customer_name: 'Jane Doe',
        product: '40oz juice box',
      },
    },
  });

  console.log(response.output_text);
};

async function getWeather(latitude: number, longitude: number) {
  const response = await fetch(
    `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m`
  );
  const data = await response.json();
  return data.current.temperature_2m;
}

const simpleTextWithFunctionCallingExample = async () => {
  const tools = [
    {
      type: 'function',
      name: 'get_weather',
      description: 'Retrieves current weather for the given location.',
      parameters: {
        type: 'object',
        properties: {
          location: {
            type: 'string',
            description: 'City and country e.g. Bogot√°, Colombia',
          },
          units: {
            type: 'string',
            enum: ['celsius', 'fahrenheit'],
            description: 'Units the temperature will be returned in.',
          },
        },
        required: ['location', 'units'],
        additionalProperties: false,
      },
      strict: true,
    },
  ];

  const input = [
    {
      role: 'user',
      content: "What's the weather like in Paris today?",
    },
  ];

  const response = await client.responses.create({
    model: 'gpt-4.1',
    input,
    tools,
  });

  console.log('Response:', response.output_text);
};

simpleTextWithFunctionCallingExample();
